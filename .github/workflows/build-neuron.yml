name: Scheduled NEURON CI

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    # Run at 2am every day
    - cron:  '0 2 * * *'
  workflow_dispatch:
    inputs:
      azure_drop_url:
        description: 'Azure drop (artifacts) url'
      neuron_branch:
        description: 'NEURON branch to test'
        default: ''

defaults:
  run:
    shell: bash

jobs:
  # This allows us to dynamically vary the number of branches we run on on
  # different days.
  provide_version_matrix:
    runs-on: ubuntu-latest
    steps:
    - name: check Azure drop url exists -> ${{ github.event.inputs.azure_drop_url }}
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.azure_drop_url
      run: |
        curl -sfSI -X GET '${{ github.event.inputs.azure_drop_url }}'

  ci:
    timeout-minutes: 45
    needs: provide_version_matrix
    runs-on: ${{ matrix.os.vm }}
    container: ${{ matrix.os.container }}
    name: ${{matrix.os.container || matrix.os.vm}}
    env:
      SDK_ROOT: $(xcrun --sdk macosx --show-sdk-path)
      OS_FLAVOUR: ${{matrix.os.flavour}}
      # min minor supported version of Python
      MIN_MINOR_PYTHON_VERSION: '9'
      # max minor supported version of Python
      MAX_MINOR_PYTHON_VERSION: '12'
      UNPRIVILEGED_USER: runner # User created+used inside Docker containers

    strategy:
      matrix:
        os:
        # Fedora 37 Docker image
        - { vm: ubuntu-latest, container: "fedora:37", flavour: redhat }
        # At the time of writing, Debian Bookworm (12) Docker image
        - { vm: ubuntu-latest, container: "debian:stable", flavour: debian }
      fail-fast: false
      
    steps:
      # Checkout the dedicated repository that steers the CI build
      - uses: actions/checkout@v4

      # Install required packages using the system package manager. This
      # includes installing or updating the git client to a sufficiently
      # new version that the checkout of the main nrn repository does *not*
      # fall back to using the REST API, which clobbers submodule information
      # and breaks the build.
      - name: Install ${{matrix.os.flavour}} packages
        run: |
          OS_CONTAINER="${{matrix.os.container}}"
          # only the part after the last slash
          OS_CONTAINER="${OS_CONTAINER##*/}"
          # replace : and . with _
          OS_CONTAINER="${OS_CONTAINER//[:.]/_}"
          CONTAINER_SCRIPT="scripts/install_${{matrix.os.flavour}}_${OS_CONTAINER}.sh"
          # pass this on to the next steps too, for convenience
          echo "OS_CONTAINER=${OS_CONTAINER}" >> "${GITHUB_ENV}"
          # (container+flavour)-specific script runs first because it must be
          # able to enable repositories that make the flavour-specific script
          # work.
          if [ -f "${CONTAINER_SCRIPT}" ]; then source "${CONTAINER_SCRIPT}"; fi
          if [ -f "${FLAVOUR_SCRIPT}" ]; then source "${FLAVOUR_SCRIPT}"; fi
        env:
          FLAVOUR_SCRIPT: scripts/install_${{matrix.os.flavour}}.sh

      # When we run in Ubuntu/Fedora/Debian containers from Docker Hub then we
      # are root. This is different from when we use the GitHub Actions images
      # directly, and leads to errors from MPI later. If we run inside Docker,
      # create a regular user to run as.
      - name: Setup unprivileged user
        # If we run in a native GitHub Actions container, without Docker, this
        # isn't needed
        if: matrix.os.container
        run: |
          useradd --create-home ${UNPRIVILEGED_USER}
          chown -R ${UNPRIVILEGED_USER}:${UNPRIVILEGED_USER} ${GITHUB_WORKSPACE}
    
      # Put all the remaining steps in one job that runs as an unprivileged user
      - name: Build and test NEURON
        run: ./wrappers/runUnprivileged.sh ./scripts/buildNeuron.sh
